package jpatch.boundary;

import java.awt.*;
import java.awt.image.*;
//import java.awt.event.*;
import javax.vecmath.*;
import net.java.games.jogl.*;

//import jpatch.*;
import jpatch.entity.*;

public class JPatchDrawableGL implements JPatchDrawable2 {
	
	private GLDrawable glDrawable;
	private volatile GL gl;
	private int iGlMode = -1;
	
	private boolean bPointAsQuad = true;
	private boolean bPerspective = false;
	private float fFocalLength = 50;
	private Matrix4f m4Transform = new Matrix4f();
	
	/** used to check if the last drawn image is stored in a display list */
	private BufferedImage image;
	private float fPointSize = 1;
	
	private int iMaxLights, iMaxTextureSize;
	private boolean bRasterMode = false;
	
	/**
	 * The unicode characters 0 to 255 as 16x14 bitmaps (autogenerated from
	 * default "Sans Serif" 14 font).
	 */
	private static final byte[][] abRaster = new byte[][] {
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,64,0,0,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-96,0,-96,0,-96,0,0,0,0,0,0,0},
		{0,0,0,0,72,0,72,0,36,0,-2,0,36,0,127,0,36,0,18,0,18,0,0,0,0,0,0,0},
		{0,0,16,0,56,0,84,0,20,0,20,0,56,0,80,0,80,0,84,0,56,0,16,0,0,0,0,0},
		{0,0,0,0,-122,0,73,0,41,0,22,0,16,0,104,0,-108,0,-110,0,97,0,0,0,0,0,0,0},
		{0,0,0,0,62,0,68,0,74,0,74,0,50,0,40,0,36,0,36,0,24,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,64,0,64,0,0,0,0,0,0,0},
		{16,0,32,0,32,0,64,0,64,0,64,0,64,0,64,0,32,0,32,0,16,0,0,0,0,0,0,0},
		{-128,0,64,0,64,0,32,0,32,0,32,0,32,0,32,0,64,0,64,0,-128,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,80,0,-8,0,32,0,0,0,0,0,0,0},
		{0,0,0,0,8,0,8,0,8,0,127,0,8,0,8,0,8,0,0,0,0,0,0,0,0,0,0,0},
		{-128,0,64,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{64,0,64,0,32,0,32,0,32,0,16,0,16,0,16,0,16,0,8,0,8,0,0,0,0,0,0,0},
		{0,0,0,0,24,0,36,0,66,0,66,0,66,0,66,0,66,0,36,0,24,0,0,0,0,0,0,0},
		{0,0,0,0,62,0,8,0,8,0,8,0,8,0,8,0,8,0,40,0,24,0,0,0,0,0,0,0},
		{0,0,0,0,124,0,64,0,32,0,16,0,8,0,4,0,4,0,4,0,120,0,0,0,0,0,0,0},
		{0,0,64,0,56,0,4,0,4,0,8,0,48,0,8,0,4,0,4,0,120,0,0,0,0,0,0,0},
		{0,0,0,0,4,0,4,0,4,0,126,0,68,0,36,0,20,0,12,0,4,0,0,0,0,0,0,0},
		{0,0,0,0,112,0,8,0,4,0,4,0,8,0,112,0,64,0,64,0,124,0,0,0,0,0,0,0},
		{0,0,0,0,24,0,36,0,66,0,66,0,100,0,88,0,64,0,32,0,30,0,0,0,0,0,0,0},
		{0,0,0,0,32,0,32,0,16,0,16,0,8,0,8,0,4,0,2,0,126,0,0,0,0,0,0,0},
		{0,0,0,0,60,0,66,0,66,0,66,0,60,0,36,0,66,0,66,0,60,0,0,0,0,0,0,0},
		{0,0,0,0,120,0,4,0,2,0,26,0,38,0,66,0,66,0,36,0,24,0,0,0,0,0,0,0},
		{0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0},
		{-128,0,64,0,64,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,1,0,6,0,8,0,48,0,8,0,6,0,1,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,63,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,32,0,24,0,4,0,3,0,4,0,24,0,32,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,64,0,0,0,64,0,64,0,32,0,16,0,8,0,8,0,-16,0,0,0,0,0,0,0},
		{0,0,0,0,30,0,32,0,75,0,86,-128,82,64,73,64,39,64,16,-128,15,0,0,0,0,0,0,0},
		{0,0,0,0,-128,-128,65,0,127,0,34,0,34,0,20,0,20,0,8,0,8,0,0,0,0,0,0,0},
		{0,0,0,0,120,0,68,0,68,0,68,0,120,0,68,0,68,0,68,0,120,0,0,0,0,0,0,0},
		{0,0,0,0,30,0,32,0,64,0,64,0,64,0,64,0,64,0,32,0,30,0,0,0,0,0,0,0},
		{0,0,0,0,124,0,66,0,65,0,65,0,65,0,65,0,65,0,66,0,124,0,0,0,0,0,0,0},
		{0,0,0,0,126,0,64,0,64,0,64,0,124,0,64,0,64,0,64,0,126,0,0,0,0,0,0,0},
		{0,0,0,0,64,0,64,0,64,0,64,0,120,0,64,0,64,0,64,0,120,0,0,0,0,0,0,0},
		{0,0,0,0,31,0,33,0,65,0,65,0,64,0,64,0,64,0,32,0,31,0,0,0,0,0,0,0},
		{0,0,0,0,65,0,65,0,65,0,65,0,127,0,65,0,65,0,65,0,65,0,0,0,0,0,0,0},
		{0,0,0,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,0,0,0,0,0},
		{-64,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,0,0,0,0,0,0},
		{0,0,0,0,65,0,66,0,68,0,72,0,80,0,112,0,72,0,68,0,66,0,0,0,0,0,0,0},
		{0,0,0,0,124,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,0,0,0,0,0},
		{0,0,0,0,65,0,73,0,73,0,85,0,85,0,85,0,99,0,99,0,65,0,0,0,0,0,0,0},
		{0,0,0,0,65,0,67,0,69,0,69,0,73,0,81,0,81,0,97,0,65,0,0,0,0,0,0,0},
		{0,0,0,0,28,0,34,0,65,0,65,0,65,0,65,0,65,0,34,0,28,0,0,0,0,0,0,0},
		{0,0,0,0,64,0,64,0,64,0,64,0,120,0,68,0,68,0,68,0,120,0,0,0,0,0,0,0},
		{1,-128,2,0,28,0,34,0,65,0,65,0,65,0,65,0,65,0,34,0,28,0,0,0,0,0,0,0},
		{0,0,0,0,65,0,66,0,68,0,72,0,120,0,68,0,66,0,66,0,124,0,0,0,0,0,0,0},
		{0,0,0,0,-16,0,8,0,8,0,8,0,48,0,64,0,-128,0,-128,0,124,0,0,0,0,0,0,0},
		{0,0,0,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,-2,0,0,0,0,0,0,0},
		{0,0,0,0,60,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,0,0,0,0,0,0},
		{0,0,0,0,16,0,16,0,40,0,40,0,40,0,68,0,68,0,-126,0,-126,0,0,0,0,0,0,0},
		{0,0,0,0,17,0,17,0,42,-128,42,-128,42,-128,42,-128,42,-128,68,64,68,64,0,0,0,0,0,0},
		{0,0,0,0,-126,0,68,0,40,0,40,0,16,0,40,0,40,0,68,0,-126,0,0,0,0,0,0,0},
		{0,0,0,0,16,0,16,0,16,0,16,0,16,0,40,0,40,0,68,0,-126,0,0,0,0,0,0,0},
		{0,0,0,0,124,0,64,0,32,0,32,0,16,0,8,0,8,0,4,0,124,0,0,0,0,0,0,0},
		{96,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,96,0,0,0,0,0,0,0},
		{8,0,8,0,16,0,16,0,16,0,32,0,32,0,32,0,32,0,64,0,64,0,0,0,0,0,0,0},
		{96,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,96,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,-126,0,68,0,68,0,40,0,16,0,16,0,0,0,0,0,0,0},
		{0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,16,0,0,0,0,0},
		{0,0,0,0,62,0,68,0,68,0,60,0,4,0,68,0,56,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,92,0,98,0,66,0,66,0,66,0,98,0,92,0,64,0,64,0,0,0,0,0,0,0},
		{0,0,0,0,56,0,64,0,64,0,64,0,64,0,64,0,56,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,58,0,70,0,66,0,66,0,66,0,70,0,58,0,2,0,2,0,0,0,0,0,0,0},
		{0,0,0,0,60,0,64,0,64,0,124,0,68,0,68,0,56,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,64,0,64,0,64,0,64,0,64,0,64,0,-32,0,64,0,48,0,0,0,0,0,0,0},
		{120,0,4,0,52,0,76,0,68,0,68,0,68,0,68,0,60,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,68,0,68,0,68,0,68,0,68,0,100,0,88,0,64,0,64,0,0,0,0,0,0,0},
		{0,0,0,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,0,64,0,0,0,0,0,0,0},
		{-64,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,32,0,0,0,32,0,0,0,0,0,0,0},
		{0,0,0,0,66,0,68,0,72,0,112,0,80,0,72,0,68,0,64,0,64,0,0,0,0,0,0,0},
		{0,0,0,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,0,0,0,0,0},
		{0,0,0,0,68,64,68,64,68,64,68,64,68,64,102,64,89,-128,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,68,0,68,0,68,0,68,0,68,0,100,0,88,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,56,0,68,0,68,0,68,0,68,0,68,0,56,0,0,0,0,0,0,0,0,0,0,0},
		{64,0,64,0,92,0,98,0,66,0,66,0,66,0,98,0,92,0,0,0,0,0,0,0,0,0,0,0},
		{2,0,2,0,58,0,70,0,66,0,66,0,66,0,70,0,58,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,64,0,64,0,64,0,64,0,64,0,96,0,88,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,112,0,8,0,8,0,48,0,64,0,64,0,56,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,32,0,64,0,64,0,64,0,64,0,64,0,-32,0,64,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,52,0,76,0,68,0,68,0,68,0,68,0,68,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,16,0,40,0,40,0,40,0,68,0,68,0,-126,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,34,0,34,0,85,0,85,0,85,0,-120,-128,-120,-128,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,68,0,40,0,40,0,16,0,40,0,40,0,68,0,0,0,0,0,0,0,0,0,0,0},
		{32,0,16,0,16,0,40,0,40,0,68,0,68,0,-126,0,-126,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,124,0,64,0,32,0,16,0,8,0,4,0,124,0,0,0,0,0,0,0,0,0,0,0},
		{32,0,64,0,64,0,64,0,64,0,-128,0,64,0,64,0,64,0,64,0,32,0,0,0,0,0,0,0},
		{64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,0,0,0,0,0},
		{64,0,32,0,32,0,32,0,32,0,16,0,32,0,32,0,32,0,32,0,64,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,76,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,127,0,65,0,65,0,65,0,65,0,65,0,65,0,127,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,16,0,60,0,112,0,80,0,80,0,80,0,80,0,60,0,16,0,0,0,0,0,0,0},
		{0,0,0,0,126,0,32,0,32,0,32,0,120,0,32,0,32,0,32,0,30,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,-126,0,124,0,68,0,68,0,68,0,124,0,-126,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,16,0,16,0,124,0,16,0,124,0,16,0,40,0,68,0,-126,0,0,0,0,0,0,0},
		{64,0,64,0,64,0,64,0,0,0,0,0,0,0,64,0,64,0,64,0,64,0,0,0,0,0,0,0},
		{124,0,2,0,2,0,28,0,34,0,66,0,68,0,56,0,64,0,64,0,62,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0},
		{0,0,0,0,62,0,65,0,-100,-128,-96,-128,-96,-128,-96,-128,-100,-128,65,0,62,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,112,0,16,0,96,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,20,0,40,0,80,0,40,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,1,0,1,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,56,0,84,0,84,0,68,0,56,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-8,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,0,80,0,112,0,0,0,0,0,0,0},
		{0,0,0,0,62,0,0,0,8,0,8,0,62,0,8,0,8,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,112,0,64,0,32,0,16,0,16,0,96,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,96,0,16,0,16,0,96,0,16,0,96,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,16,0,0,0,0,0},
		{64,0,64,0,116,0,76,0,68,0,68,0,68,0,68,0,68,0,0,0,0,0,0,0,0,0,0,0},
		{10,0,10,0,10,0,10,0,10,0,10,0,10,0,26,0,58,0,58,0,30,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{8,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,112,0,32,0,32,0,32,0,96,0,32,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,72,0,72,0,48,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,-96,0,80,0,40,0,80,0,-96,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,64,-128,35,-64,18,-128,49,-128,41,-128,36,-128,36,0,98,0,33,0,0,0,0,0,0,0},
		{0,0,0,0,67,-128,34,0,17,0,48,-128,40,-128,39,0,36,0,98,0,33,0,0,0,0,0,0,0},
		{0,0,0,0,32,-128,19,-64,10,-128,105,-128,21,-128,18,-128,98,0,17,0,96,-128,0,0,0,0,0,0},
		{120,0,-128,0,-128,0,64,0,32,0,16,0,16,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,-128,-128,65,0,127,0,34,0,34,0,20,0,20,0,8,0,8,0,0,0,4,0,8,0},
		{0,0,0,0,-128,-128,65,0,127,0,34,0,34,0,20,0,20,0,8,0,8,0,0,0,8,0,4,0},
		{0,0,0,0,-128,-128,65,0,127,0,34,0,34,0,20,0,20,0,8,0,8,0,0,0,20,0,8,0},
		{0,0,0,0,-128,-128,65,0,127,0,34,0,34,0,20,0,20,0,8,0,8,0,0,0,44,0,52,0},
		{0,0,0,0,-128,-128,65,0,127,0,34,0,34,0,20,0,20,0,8,0,8,0,0,0,20,0,0,0},
		{0,0,0,0,-128,-128,65,0,127,0,34,0,34,0,20,0,20,0,8,0,8,0,28,0,20,0,28,0},
		{0,0,0,0,-125,-32,66,0,62,0,34,0,19,-64,10,0,10,0,6,0,3,-32,0,0,0,0,0,0},
		{4,0,8,0,30,0,32,0,64,0,64,0,64,0,64,0,64,0,32,0,30,0,0,0,0,0,0,0},
		{0,0,0,0,126,0,64,0,64,0,64,0,124,0,64,0,64,0,64,0,126,0,0,0,8,0,16,0},
		{0,0,0,0,126,0,64,0,64,0,64,0,124,0,64,0,64,0,64,0,126,0,0,0,16,0,8,0},
		{0,0,0,0,126,0,64,0,64,0,64,0,124,0,64,0,64,0,64,0,126,0,0,0,20,0,8,0},
		{0,0,0,0,126,0,64,0,64,0,64,0,124,0,64,0,64,0,64,0,126,0,0,0,20,0,0,0},
		{0,0,0,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,0,64,0,-128,0},
		{0,0,0,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,0,64,0,32,0},
		{0,0,0,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,0,-96,0,64,0},
		{0,0,0,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,0,-96,0,0,0},
		{0,0,0,0,124,0,66,0,65,0,65,0,-15,0,65,0,65,0,66,0,124,0,0,0,0,0,0,0},
		{0,0,0,0,65,0,67,0,69,0,69,0,73,0,81,0,81,0,97,0,65,0,0,0,22,0,26,0},
		{0,0,0,0,28,0,34,0,65,0,65,0,65,0,65,0,65,0,34,0,28,0,0,0,4,0,8,0},
		{0,0,0,0,28,0,34,0,65,0,65,0,65,0,65,0,65,0,34,0,28,0,0,0,8,0,4,0},
		{0,0,0,0,28,0,34,0,65,0,65,0,65,0,65,0,65,0,34,0,28,0,0,0,20,0,8,0},
		{0,0,0,0,28,0,34,0,65,0,65,0,65,0,65,0,65,0,34,0,28,0,0,0,22,0,26,0},
		{0,0,0,0,28,0,34,0,65,0,65,0,65,0,65,0,65,0,34,0,28,0,0,0,20,0,0,0},
		{0,0,0,0,65,0,34,0,20,0,8,0,20,0,34,0,65,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,92,0,34,0,81,0,81,0,73,0,69,0,69,0,34,0,29,0,0,0,0,0,0,0},
		{0,0,0,0,60,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,0,0,8,0,16,0},
		{0,0,0,0,60,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,0,0,16,0,8,0},
		{0,0,0,0,60,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,0,0,20,0,8,0},
		{0,0,0,0,60,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,0,0,20,0,0,0},
		{0,0,0,0,16,0,16,0,16,0,16,0,16,0,40,0,40,0,68,0,-126,0,0,0,16,0,8,0},
		{0,0,0,0,64,0,64,0,120,0,68,0,68,0,68,0,120,0,64,0,64,0,0,0,0,0,0,0},
		{0,0,0,0,88,0,68,0,68,0,72,0,80,0,80,0,72,0,72,0,48,0,0,0,0,0,0,0},
		{0,0,0,0,62,0,68,0,68,0,60,0,4,0,68,0,56,0,0,0,8,0,16,0,0,0,0,0},
		{0,0,0,0,62,0,68,0,68,0,60,0,4,0,68,0,56,0,0,0,32,0,16,0,0,0,0,0},
		{0,0,0,0,62,0,68,0,68,0,60,0,4,0,68,0,56,0,0,0,40,0,16,0,0,0,0,0},
		{0,0,0,0,62,0,68,0,68,0,60,0,4,0,68,0,56,0,0,0,44,0,52,0,0,0,0,0},
		{0,0,0,0,62,0,68,0,68,0,60,0,4,0,68,0,56,0,0,0,40,0,0,0,0,0,0,0},
		{0,0,0,0,62,0,68,0,68,0,60,0,4,0,68,0,56,0,0,0,28,0,20,0,28,0,0,0},
		{0,0,0,0,55,-128,72,0,72,0,63,-128,8,-128,72,-128,55,0,0,0,0,0,0,0,0,0,0,0},
		{8,0,16,0,56,0,64,0,64,0,64,0,64,0,64,0,56,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,60,0,64,0,64,0,124,0,68,0,68,0,56,0,0,0,8,0,16,0,0,0,0,0},
		{0,0,0,0,60,0,64,0,64,0,124,0,68,0,68,0,56,0,0,0,16,0,8,0,0,0,0,0},
		{0,0,0,0,60,0,64,0,64,0,124,0,68,0,68,0,56,0,0,0,40,0,16,0,0,0,0,0},
		{0,0,0,0,60,0,64,0,64,0,124,0,68,0,68,0,56,0,0,0,40,0,0,0,0,0,0,0},
		{0,0,0,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,0,64,0,-128,0,0,0,0,0},
		{0,0,0,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,0,64,0,32,0,0,0,0,0},
		{0,0,0,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,0,-96,0,64,0,0,0,0,0},
		{0,0,0,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,0,-96,0,0,0,0,0,0,0},
		{0,0,0,0,56,0,68,0,68,0,68,0,68,0,68,0,56,0,40,0,112,0,8,0,0,0,0,0},
		{0,0,0,0,68,0,68,0,68,0,68,0,68,0,100,0,88,0,0,0,44,0,52,0,0,0,0,0},
		{0,0,0,0,56,0,68,0,68,0,68,0,68,0,68,0,56,0,0,0,16,0,32,0,0,0,0,0},
		{0,0,0,0,56,0,68,0,68,0,68,0,68,0,68,0,56,0,0,0,16,0,8,0,0,0,0,0},
		{0,0,0,0,56,0,68,0,68,0,68,0,68,0,68,0,56,0,0,0,40,0,16,0,0,0,0,0},
		{0,0,0,0,56,0,68,0,68,0,68,0,68,0,68,0,56,0,0,0,44,0,52,0,0,0,0,0},
		{0,0,0,0,56,0,68,0,68,0,68,0,68,0,68,0,56,0,0,0,40,0,0,0,0,0,0,0},
		{0,0,0,0,8,0,0,0,0,0,127,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,120,0,68,0,100,0,84,0,76,0,68,0,60,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,52,0,76,0,68,0,68,0,68,0,68,0,68,0,0,0,16,0,32,0,0,0,0,0},
		{0,0,0,0,52,0,76,0,68,0,68,0,68,0,68,0,68,0,0,0,16,0,8,0,0,0,0,0},
		{0,0,0,0,52,0,76,0,68,0,68,0,68,0,68,0,68,0,0,0,40,0,16,0,0,0,0,0},
		{0,0,0,0,52,0,76,0,68,0,68,0,68,0,68,0,68,0,0,0,40,0,0,0,0,0,0,0},
		{32,0,16,0,16,0,40,0,40,0,68,0,68,0,-126,0,-126,0,0,0,16,0,8,0,0,0,0,0},
		{64,0,64,0,92,0,98,0,66,0,66,0,66,0,98,0,92,0,64,0,64,0,0,0,0,0,0,0},
		{32,0,16,0,16,0,40,0,40,0,68,0,68,0,-126,0,-126,0,0,0,40,0,0,0,0,0,0,0},
	};
	
	/**
	 * The AdvanceX value for each character (autogenerated from
	 * default "Sans Serif" 14 font).
	 */
	static final float[] afAdvance = new float[] {
		9,9,9,9,9,9,9,9,9,0,0,9,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
		4,4,4,8,8,8,8,3,4,4,6,10,4,7,4,6,8,8,8,8,8,8,8,8,8,8,4,4,10,10,10,5,
		10,8,7,8,9,7,6,9,9,3,4,8,6,10,9,9,7,9,8,6,8,8,8,10,8,7,7,4,6,4,8,6,
		7,7,8,6,8,7,4,7,7,3,4,7,3,11,7,7,8,8,5,6,4,7,6,9,7,6,7,4,4,4,8,9,
		9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
		4,4,8,8,8,8,4,8,7,10,6,6,10,7,8,6,5,10,5,5,7,8,8,4,7,5,6,6,10,10,10,5,
		8,8,8,8,8,8,11,8,7,7,7,7,3,3,3,3,9,9,9,9,9,9,9,10,9,8,8,8,8,7,7,7,
		7,7,7,7,7,7,10,6,7,7,7,7,3,3,3,3,7,7,7,7,7,7,7,10,7,7,7,7,7,6,8,6
	};
	
	/** Offset to the GL Display-Lists holding the character bitmaps. */
	private int iFontOffset;
	/** Offset to the GL Display-Lists holding the imagess. */
	private int iImageOffset;
	
	
	public JPatchDrawableGL(final JPatchDrawableEventListener listener, boolean leightweight) {
		m4Transform.setIdentity();
		if (leightweight) {
			glDrawable = GLDrawableFactory.getFactory().createGLJPanel(new GLCapabilities());
		} else {
			glDrawable = GLDrawableFactory.getFactory().createGLCanvas(new GLCapabilities());
		}
		glDrawable.addGLEventListener(new GLEventListener() {
			public void init(GLDrawable glDrawable) {
				gl = glDrawable.getGL();
				
//				if (!version) {
//					GlTest.logger.log("OpenGL initializing...\n");
//					GlTest.logger.log("GL:\t" + gl.getClass().getName() + "\n");
//					GlTest.logger.log("GL_VENDOR:\t" + gl.glGetString(GL.GL_VENDOR) + "\n");
//					GlTest.logger.log("GL_RENDERER:" + gl.glGetString(GL.GL_RENDERER) + "\n");
//					GlTest.logger.log("GL_VERSION:\t" + gl.glGetString(GL.GL_VERSION) + "\n");
//					//GlTest.logger.log("tGL_EXTENSIONS: " + gl.glGetString(GL.GL_EXTENSIONS) + "\n");
//					version = true;
//				}
				
				/*
				 * Generate display lists to render font characters.
				 */
				gl.glPixelStorei(GL.GL_UNPACK_ALIGNMENT, 1);
				iFontOffset = gl.glGenLists(256);
				for (int i = 0; i < 256; i++) {
			        gl.glNewList(i + iFontOffset, GL.GL_COMPILE);
			            gl.glBitmap(16, 12, 0, 0, afAdvance[i], 0, abRaster[i]);
			        gl.glEndList();
			    }
				/*
				 * Generate display lists for images.
				 */
				iImageOffset = gl.glGenLists(1);
				if (image != null)
					makeImageList();
				
//				gl.glMaterialfv(GL.GL_FRONT, GL.GL_AMBIENT, new float[] { 0.0f, 0.0f, 0.0f, 1.0f } );
//				gl.glMaterialfv(GL.GL_FRONT, GL.GL_DIFFUSE, new float[] { 1.0f, 0.0f, 0.0f, 1.0f } );
//				gl.glMaterialfv(GL.GL_FRONT, GL.GL_SPECULAR, new float[] { 1.0f, 1.0f, 1.0f, 1.0f } );
//				gl.glMaterialfv(GL.GL_FRONT, GL.GL_SHININESS, new float[] { 50.0f } );
				
//				gl.glLightfv(GL.GL_LIGHT0, GL.GL_AMBIENT, new float[] { 1.0f, 1.0f, 1.0f, 0.0f });
//				gl.glLightfv(GL.GL_LIGHT0, GL.GL_DIFFUSE, new float[] { 1.0f, 1.0f, 1.0f, 0.0f });
//				gl.glLightfv(GL.GL_LIGHT0, GL.GL_SPECULAR, new float[] { 1.0f, 1.0f, 1.0f, 0.0f });
//				gl.glLightfv(GL.GL_LIGHT0, GL.GL_POSITION, new float[] { 1.0f, 1.0f, 1.0f, 0.0f });
//				
//				gl.glLightfv(GL.GL_LIGHT1, GL.GL_AMBIENT, new float[] { 0.5f, 0.5f, 0.5f, 0.0f });
//				gl.glLightfv(GL.GL_LIGHT1, GL.GL_DIFFUSE, new float[] { 0.5f, 0.5f, 0.5f, 0.0f });
//				gl.glLightfv(GL.GL_LIGHT1, GL.GL_SPECULAR, new float[] { 0.5f, 0.5f, 0.5f, 0.0f });
//				gl.glLightfv(GL.GL_LIGHT1, GL.GL_POSITION, new float[] { -1.0f, 0.0f, 1.0f, 0.0f });
//				
//				gl.glLightfv(GL.GL_LIGHT2, GL.GL_AMBIENT, new float[] { 2.0f, 2.0f, 2.0f, 0.0f });
//				gl.glLightfv(GL.GL_LIGHT2, GL.GL_DIFFUSE, new float[] { 2.0f, 2.0f, 2.0f, 0.0f });
//				gl.glLightfv(GL.GL_LIGHT2, GL.GL_SPECULAR, new float[] { 2.0f, 2.0f, 2.0f, 0.0f });
//				gl.glLightfv(GL.GL_LIGHT2, GL.GL_POSITION, new float[] { 0.0f, 1.0f, -1.0f, 0.0f });
				
				
//				gl.glEnable(GL.GL_LIGHTING);
//				gl.glEnable(GL.GL_LIGHT0);
//				gl.glEnable(GL.GL_LIGHT1);
//				gl.glEnable(GL.GL_LIGHT2);
				
				gl.glDisable(GL.GL_CULL_FACE);
				gl.glCullFace(GL.GL_BACK);
				gl.glDepthFunc(GL.GL_LESS);
				gl.glEnable(GL.GL_DEPTH_TEST);
				gl.glLightModeli(GL.GL_LIGHT_MODEL_TWO_SIDE, 1);
				
				gl.glMaterialfv(GL.GL_BACK, GL.GL_AMBIENT, new float[] { 1.0f, 0.0f, 0.0f } );
				gl.glMaterialfv(GL.GL_BACK, GL.GL_DIFFUSE, new float[] { 0.0f, 0.0f, 0.0f } );
				gl.glMaterialfv(GL.GL_BACK, GL.GL_SPECULAR, new float[] { 0.0f, 0.0f, 0.0f } );
				gl.glMaterialfv(GL.GL_BACK, GL.GL_SHININESS, new float[] { 0.0f } );
				
				int[] i = new int[1];
				gl.glGetIntegerv(GL.GL_MAX_LIGHTS, i);
				iMaxLights = i[0];
				gl.glGetIntegerv(GL.GL_MAX_TEXTURE_SIZE, i);
				iMaxTextureSize = i[0];
			}
			
			public void reshape(GLDrawable glDrawable, int x, int y, int width, int height) {
			}
			public void displayChanged(GLDrawable glDrawable, boolean modeChanged, boolean deviceChanged) {
			}
			public void display(GLDrawable glDrawable) {
				gl = glDrawable.getGL();
				enableRasterMode(false);
				listener.display(JPatchDrawableGL.this);
				gl.glEnd();
				gl.glFlush();
				iGlMode = -1;
			}
		});
	}
	
	public String getInfo() {
		return "JOGL OpenGL Renderer\nGL Vendor: " + gl.glGetString(GL.GL_VENDOR) + "\nGL Renderer: " + gl.glGetString(GL.GL_RENDERER) + "\nGL Version: " + gl.glGetString(GL.GL_VERSION) + "\n";
	}
	
	private void enableRasterMode(boolean enable) {
		if (bRasterMode == enable)
			return;
		bRasterMode = enable;
		if (iGlMode != -1) {
			gl.glEnd();
			iGlMode = -1;
		}
		Dimension dim = glDrawable.getSize();
		if (!enable) {
			float w = dim.width / 2;
			float h = dim.height / 2;
			gl.glMatrixMode(GL.GL_PROJECTION);
//			gl.glLoadIdentity();
//			gl.glLoadMatrixf(new float[] {
//					m4Transform.m00, m4Transform.m10, m4Transform.m20, m4Transform.m30,
//					m4Transform.m01, m4Transform.m11, m4Transform.m21, m4Transform.m31,
//					m4Transform.m02, m4Transform.m12, m4Transform.m22, m4Transform.m32,
//					m4Transform.m03, m4Transform.m13, m4Transform.m23, m4Transform.m33,
//			});
			gl.glLoadMatrixf(new float[] {
					1, 0, 0, 0,
					0, 1, 0, 0,
					0, 0, 1, 0,
					0, 0, 0, 1
			});
			if (bPerspective) {
				float a = 35f / fFocalLength;
				float b = a * h / w;
				gl.glFrustum(-a, a, -b, b, 1, Short.MAX_VALUE);
			} else {
				gl.glOrtho(-w, w, -h, h, Short.MAX_VALUE, -Short.MAX_VALUE);
			}
			gl.glMatrixMode(GL.GL_MODELVIEW);
//			gl.glLoadIdentity();
			gl.glLoadMatrixf(new float[] {
					1, 0, 0, 0,
					0, 1, 0, 0,
					0, 0, 1, 0,
					0, 0, 0, 1
			});
			gl.glDisable(GL.GL_LIGHTING); // FIXME
			gl.glEnable(GL.GL_DEPTH_TEST);
			gl.glShadeModel(GL.GL_SMOOTH);
			
		} else {
			//Dimension dim = glDrawable.getSize();
			float w = dim.width;
			float h = dim.height;
			gl.glViewport(0, 0, (int) w, (int) h);
		    gl.glMatrixMode(GL.GL_PROJECTION);
		    gl.glLoadIdentity();
		    gl.glOrtho (0.0, w, h, 0.0, 1.0, -1.0);
		    gl.glMatrixMode(GL.GL_MODELVIEW);
		    gl.glLoadIdentity();
		    gl.glDisable(GL.GL_LIGHTING);
			gl.glDisable(GL.GL_DEPTH_TEST);
			gl.glShadeModel(GL.GL_FLAT);		
		} 
	}
	
	private void makeImageList() {
		DataBuffer dataBuffer = image.getRaster().getDataBuffer();		// get image data buffer
		if (dataBuffer.getDataType() != DataBuffer.TYPE_BYTE) return;	// we need a byte databuffer
		/*
		 * make displaylist that draws the image
		 */
		gl.glNewList(iImageOffset, GL.GL_COMPILE);		
		gl.glDrawPixels(image.getWidth(), image.getHeight(), GL.GL_BGR, GL.GL_UNSIGNED_BYTE, ((DataBufferByte) dataBuffer).getData());
		gl.glEndList();
	}
	
	public void drawImage(BufferedImage image, int x, int y, float scaleX, float scaleY) {
		throw new UnsupportedOperationException(getClass().getName() + " doesn't suppot drawing images directly");
	}
	
	public void drawImage(int imWidth, int imHeight, int x, int y, float scaleX, float scaleY) {
//		/*
//		 * Check if we know this image
//		 */
//		if (iGlMode != -1) {
//			gl.glEnd();
//			iGlMode = -1;
//		}
//		if (this.image != image) {
//			this.image = image;							// remember this image
//			makeImageList();							// generate a display list that draws the image
//		}
//		enableRasterMode(true);							// switch to "raster mode"
//		Dimension dim = glDrawable.getSize();
//		float h = dim.height;
//		gl.glPixelZoom(scaleX, scaleY);				// set raster position
//		gl.glRasterPos2i(x, y);			// set image zoom
//		gl.glMatrixMode(GL.GL_PROJECTION);
//		gl.glLoadMatrixf(new float[] {
//				scaleX, 0, 0, 0,
//				0, scaleY, 0, 0,
//				0, 0, 1, 0,
//				0, 0, 0, 1
//		});
//		gl.glCallList(iImageOffset);					// call displaylist that draws the image
//		enableRasterMode(false);						// switch to "3d mode"
		if (imWidth > iMaxTextureSize)
			imWidth = iMaxTextureSize;
		if (imHeight > iMaxTextureSize)
			imHeight = iMaxTextureSize;
		int txWidth = getTextureSize(imWidth);
		int txHeight = getTextureSize(imHeight);
		float right = (float) imWidth / txWidth;
		float bottom = (float) imHeight / txHeight;
		float width = imWidth * scaleX;
		float height = imHeight * scaleY;
		if (iGlMode != -1) {
			gl.glEnd();
			iGlMode = -1;
		}
		enableRasterMode(true);
		gl.glEnable(GL.GL_TEXTURE_2D);
		gl.glBegin(GL.GL_QUADS);
		gl.glTexCoord2f(0, 0);
		gl.glVertex2f(x, y);
		gl.glTexCoord2f(right, 0);
		gl.glVertex2f(x + width, y);
		gl.glTexCoord2f(right, bottom);
		gl.glVertex2f(x + width, y + height);
		gl.glTexCoord2f(0, bottom);
		gl.glVertex2f(x, y + height);
		gl.glEnd();
		gl.glDisable(GL.GL_TEXTURE_2D);
	}
	
	public void setTexture(int width, int height, byte[] data) {
		System.out.println("setTexture " + width + "x" + height);
		gl.glPixelStorei(GL.GL_UNPACK_ALIGNMENT, 1);
		gl.glTexImage2D(GL.GL_TEXTURE_2D, 0, 3, width, height, 0, GL.GL_BGR, GL.GL_UNSIGNED_BYTE, data);
		gl.glTexParameterf(GL.GL_TEXTURE_2D, GL.GL_TEXTURE_WRAP_S, GL.GL_CLAMP);
	    gl.glTexParameterf(GL.GL_TEXTURE_2D, GL.GL_TEXTURE_WRAP_T, GL.GL_CLAMP);
	    gl.glTexParameterf(GL.GL_TEXTURE_2D, GL.GL_TEXTURE_MAG_FILTER, GL.GL_NEAREST);
	    gl.glTexParameterf(GL.GL_TEXTURE_2D, GL.GL_TEXTURE_MIN_FILTER, GL.GL_NEAREST);
	    gl.glTexEnvf(GL.GL_TEXTURE_ENV, GL.GL_TEXTURE_ENV_MODE, GL.GL_DECAL);
	}
	
	public void drawString(String string, int x, int y) {
		enableRasterMode(true);							// switch to "raster mode"
		if (iGlMode != -1) {
			iGlMode = -1;
			gl.glEnd();
		}
		Dimension dim = glDrawable.getSize();
		float h = dim.height;						
		gl.glRasterPos2i(x, y);			// set raster position
		char[] c = string.toCharArray();
	    for (int i = 0, n = c.length; i < n; i++) {		// loop over characters
	    	int off = (int) c[i];
	    	if (off >= 0 && off < 256)
	    		gl.glCallList(off + iFontOffset);		// call display list that draws a character
	    }
	}
	
	public void drawLine(int x1, int y1, int x2, int y2) {
		enableRasterMode(true);							// switch to "raster mode"
		if (iGlMode != GL.GL_LINES) {
			gl.glEnd();
			iGlMode = GL.GL_LINES;
			gl.glBegin(iGlMode);
		}
		gl.glVertex2i(x1, y1);
		gl.glVertex2i(x2, y2);						
	}
	
	public void drawRect(int x, int y, int width, int height) {
		drawLine(x, y, x + width, y);
		drawLine(x, y + height, x + width, y + height);
		drawLine(x, y, x, y + height);
		drawLine(x + width, y, x + width, y + height);
	}
	
	public void fillRect(int x, int y, int width, int height) {
		enableRasterMode(true);							// switch to "raster mode"
		if (iGlMode != GL.GL_QUADS) {
			gl.glEnd();
			iGlMode = GL.GL_QUADS;
			gl.glBegin(iGlMode);
		}
		gl.glVertex2i(x, y);
		gl.glVertex2i(x + width, y);
		gl.glVertex2i(x + width, y + height);
		gl.glVertex2i(x, y + height);
	}
	
	public Component getComponent() {
		return (Component) glDrawable;
	}
	
	public void display() {
		glDrawable.display();
	}
	
	public void clear(int mode, Color3f color) {
		int bits = 0;
		if ((mode & COLOR_BUFFER) > 0) bits |= GL.GL_COLOR_BUFFER_BIT;
		if ((mode & DEPTH_BUFFER) > 0) bits |= GL.GL_DEPTH_BUFFER_BIT;
		gl.glClearColor(color.x, color.y, color.z, 0);
		gl.glClearDepth(Short.MAX_VALUE);
		gl.glClear(bits);
		gl.glFlush();
	}
	
	public void setProjection(int projection) {
		bPerspective = (projection == PERSPECTIVE);
	}
	
	public void setClipping(float near, float far) {
		//Dimension dim = glCanvas.getSize();
		//float h = (float) dim.height / (float) dim.width;
		//gl.glFrustum(-1.0f, 1.0f, -h, h, near, 32000.0f);
	}
	
	public void setFocalLength(float focalLength) {
		fFocalLength = focalLength;
	}
	
	public void setGhostRenderingEnabled(boolean enable) { }
	
	public void setTransparentRenderingEnabled(boolean enable) { }
	
	public void setLightingEnable(boolean enable) {
		if (enable) {
			gl.glEnd();
			iGlMode = -1;
			gl.glEnable(GL.GL_LIGHTING);
		} else {
			gl.glEnd();
			iGlMode = -1;
			gl.glDisable(GL.GL_LIGHTING);
		}
	}
	
	public void setColor(Color3f color) {
		gl.glColor3f(color.x, color.y, color.z);
	}
	
	public void setColor(Color4f color) {
		gl.glColor4f(color.x, color.y, color.z, color.w);
	}
	
	public void setMaterial(MaterialProperties mp) {
		gl.glMaterialfv(GL.GL_FRONT, GL.GL_AMBIENT, new float[] { mp.red * mp.ambient, mp.green * mp.ambient, mp.blue * mp.ambient, 1.0f } );
		gl.glMaterialfv(GL.GL_FRONT, GL.GL_DIFFUSE, new float[] { mp.red * mp.diffuse, mp.green * mp.diffuse, mp.blue * mp.diffuse, 1.0f } );
		gl.glMaterialfv(GL.GL_FRONT, GL.GL_SPECULAR, new float[] {
				mp.specular * (1 - mp.metallic + mp.metallic * mp.red),
				mp.specular * (1 - mp.metallic + mp.metallic * mp.green),
				mp.specular * (1 - mp.metallic + mp.metallic * mp.blue),
				1.0f });
		gl.glMaterialfv(GL.GL_FRONT, GL.GL_SHININESS, new float[] { 1f / mp.roughness } );
//		gl.glMaterialfv(GL.GL_FRONT, GL.GL_AMBIENT, new float[] { 0.0f, 0.0f, 0.0f, 1.0f } );
//		gl.glMaterialfv(GL.GL_FRONT, GL.GL_DIFFUSE, new float[] { 1.0f, 0.0f, 0.0f, 1.0f } );
//		gl.glMaterialfv(GL.GL_FRONT, GL.GL_SPECULAR, new float[] { 1.0f, 1.0f, 1.0f, 1.0f } );
//		gl.glMaterialfv(GL.GL_FRONT, GL.GL_SHININESS, new float[] { 50.0f } );
	}
	
	public void setTransform(Matrix4f transform) {
		m4Transform = transform;
	}
	
	public int getTextureSize(int size) {
		if (size > iMaxTextureSize)
			return iMaxTextureSize;
		for (int i = 6; i < 24; i++) {
			int s = 1 << i;
			if (s >= size)
				return s;
		}
		return -1;
	}
	
	public void setLighting(RealtimeLighting lighting) {
		Color3f ambient = lighting.getAmbientColor();
		gl.glLightModelfv(GL.GL_LIGHT_MODEL_AMBIENT, new float[] { ambient.x, ambient.y, ambient.z, 1 });
		for (int i = 0; i < iMaxLights; i++) {
			if (i < lighting.numLights()) {
				gl.glEnable(GL.GL_LIGHT0 + i);
				RealtimeLighting.LightSource light = lighting.getLight(i);
				if (light instanceof RealtimeLighting.DirectionalLight) {
					RealtimeLighting.DirectionalLight directionalLight = (RealtimeLighting.DirectionalLight) light;
					Color3f color = directionalLight.getColor();
					
					/*
					 * set GL light colors
					 */
					gl.glLightfv(GL.GL_LIGHT0 + i, GL.GL_AMBIENT, new float[] { 0, 0, 0, 1 });
					gl.glLightfv(GL.GL_LIGHT0 + i, GL.GL_DIFFUSE, new float[] { color.x, color.y, color.z, 1 });
					if (directionalLight.castsHighlight())
						gl.glLightfv(GL.GL_LIGHT0 + i, GL.GL_SPECULAR, new float[] { color.x, color.y, color.z, 1 });
					else
						gl.glLightfv(GL.GL_LIGHT0 + i, GL.GL_SPECULAR, new float[] { 0, 0, 0, 1 });
					Vector3f direction = directionalLight.getDirection();
					
					/*
					 * set GL light directions (w = 0 for directional light)
					 */
					gl.glLightfv(GL.GL_LIGHT0 + i, GL.GL_POSITION, new float[] { -direction.x, -direction.y, -direction.z, 0 });
					
					/*
					 * set GL spot cutoff (180 = no spot)
					 */
					gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_SPOT_CUTOFF, 180);
				} else if (light instanceof RealtimeLighting.PointLight) {
					RealtimeLighting.PointLight pointLight = (RealtimeLighting.PointLight) light;
					Color3f color = pointLight.getColor();
					
					/*
					 * set GL light colors
					 */
					gl.glLightfv(GL.GL_LIGHT0 + i, GL.GL_AMBIENT, new float[] { 0, 0, 0, 1 });
					gl.glLightfv(GL.GL_LIGHT0 + i, GL.GL_DIFFUSE, new float[] { color.x, color.y, color.z, 1 });
					if (pointLight.castsHighlight())
						gl.glLightfv(GL.GL_LIGHT0 + i, GL.GL_SPECULAR, new float[] { color.x, color.y, color.z, 1 });
					else
						gl.glLightfv(GL.GL_LIGHT0 + i, GL.GL_SPECULAR, new float[] { 0, 0, 0, 1 });
					Point3f position = pointLight.getPosition();
					
					/*
					 * set GL light position (w = 1 for point light)
					 */
					gl.glLightfv(GL.GL_LIGHT0 + i, GL.GL_POSITION, new float[] { position.x, position.y, position.z, 1 });
					
					/*
					 * set GL attenuation
					 */
					switch (pointLight.getAttenuation()) {
						case 0: {
							gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_CONSTANT_ATTENUATION, 1);
							gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_LINEAR_ATTENUATION, 0);
							gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_QUADRATIC_ATTENUATION, 0);
						} break;
						case 1: {
							gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_CONSTANT_ATTENUATION, 0);
							gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_LINEAR_ATTENUATION, 1f / pointLight.getDistance());
							gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_QUADRATIC_ATTENUATION, 0);
						} break;
						case 2: {
							gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_CONSTANT_ATTENUATION, 0);
							gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_LINEAR_ATTENUATION, 0);
							gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_QUADRATIC_ATTENUATION, 1f / pointLight.getDistance() / pointLight.getDistance());
						} break;
					}
					
					/*
					 * set GL spot cutoff (180 = no spot)
					 */
					gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_SPOT_CUTOFF, 180);
				} else if (light instanceof RealtimeLighting.SpotLight) {
					RealtimeLighting.SpotLight spotLight = (RealtimeLighting.SpotLight) light;
					Color3f color = spotLight.getColor();
					
					/*
					 * set GL light colors
					 */
					gl.glLightfv(GL.GL_LIGHT0 + i, GL.GL_AMBIENT, new float[] { 0, 0, 0, 1 });
					gl.glLightfv(GL.GL_LIGHT0 + i, GL.GL_DIFFUSE, new float[] { color.x, color.y, color.z, 1 });
					if (spotLight.castsHighlight())
						gl.glLightfv(GL.GL_LIGHT0 + i, GL.GL_SPECULAR, new float[] { color.x, color.y, color.z, 1 });
					else
						gl.glLightfv(GL.GL_LIGHT0 + i, GL.GL_SPECULAR, new float[] { 0, 0, 0, 1 });
					Point3f position = spotLight.getPosition();
					
					/*
					 * set GL light position (w = 1 for point light)
					 */
					gl.glLightfv(GL.GL_LIGHT0 + i, GL.GL_POSITION, new float[] { position.x, position.y, position.z, 1 });
					
					/*
					 * set GL attenuation
					 */
					switch (spotLight.getAttenuation()) {
						case 0: {
							gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_CONSTANT_ATTENUATION, 1);
							gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_LINEAR_ATTENUATION, 0);
							gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_QUADRATIC_ATTENUATION, 0);
						} break;
						case 1: {
							gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_CONSTANT_ATTENUATION, 0);
							gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_LINEAR_ATTENUATION, 1f / spotLight.getDistance());
							gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_QUADRATIC_ATTENUATION, 0);
						} break;
						case 2: {
							gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_CONSTANT_ATTENUATION, 0);
							gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_LINEAR_ATTENUATION, 0);
							gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_QUADRATIC_ATTENUATION, 1f / spotLight.getDistance() / spotLight.getDistance());
						} break;
					}
					
					Vector3f direction = spotLight.getDirection();
					
					/*
					 * set GL spot direction
					 */
					gl.glLightfv(GL.GL_LIGHT0 + i, GL.GL_SPOT_DIRECTION, new float[] { direction.x, direction.y, direction.z });
					
					/*
					 * set GL spot cutoff
					 */
					gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_SPOT_CUTOFF, spotLight.getRadius());
					
					/*
					 * set GL spot cutoff exponent
					 */
					gl.glLightf(GL.GL_LIGHT0 + i, GL.GL_SPOT_EXPONENT, 0);
				}
			} else {
				gl.glDisable(GL.GL_LIGHT0 + i);
			}
		}
	}
	
	public void setPointSize(int size) {
		gl.glPointSize(size);
		fPointSize = (float) size / 2;
	}
	
	public void drawPoint(Point3f p) {
		enableRasterMode(false);
		if (bPointAsQuad) {
			if (iGlMode != -1) {
				gl.glEnd();
				iGlMode = -1;
			}
			gl.glBegin(GL.GL_QUADS);
			gl.glVertex3f(p.x - fPointSize, p.y - fPointSize, p.z);
			gl.glVertex3f(p.x + fPointSize, p.y - fPointSize, p.z);
			gl.glVertex3f(p.x + fPointSize, p.y + fPointSize, p.z);
			gl.glVertex3f(p.x - fPointSize, p.y + fPointSize, p.z);
			gl.glEnd();
		} else {
			if (iGlMode != GL.GL_POINTS) {
				gl.glEnd();
				iGlMode = GL.GL_POINTS;
				gl.glBegin(iGlMode);
			}
			gl.glVertex3f(p.x, p.y, p.z);
		}
	}
	
	public void drawLine(Point3f p0, Point3f p1) {
		enableRasterMode(false);
		if (iGlMode != GL.GL_LINES) {
			gl.glEnd();
			iGlMode = GL.GL_LINES;
			gl.glBegin(iGlMode);
		}
		gl.glVertex3f(p0.x, p0.y, p0.z);
		gl.glVertex3f(p1.x, p1.y, p1.z);
	}
	
	public void drawTriangle(Point3f p0, Point3f p1, Point3f p2) {
		enableRasterMode(false);
		if (iGlMode != GL.GL_TRIANGLES) {
			gl.glEnd();
			iGlMode = GL.GL_TRIANGLES;
			gl.glBegin(iGlMode);
		}
		gl.glVertex3f(p0.x, p0.y, p0.z);
		gl.glVertex3f(p1.x, p1.y, p1.z);
		gl.glVertex3f(p2.x, p2.y, p2.z);
	}
	
	public void drawTriangle(Point3f p0, Color3f c0, Point3f p1, Color3f c1, Point3f p2, Color3f c2) {
		enableRasterMode(false);
		if (iGlMode != GL.GL_TRIANGLES) {
			gl.glEnd();
			iGlMode = GL.GL_TRIANGLES;
			
			gl.glBegin(iGlMode);
		}
		
		gl.glColor3f(c0.x, c0.y, c0.z);
		gl.glVertex3f(p0.x, p0.y, p0.z + 1);
		gl.glColor3f(c1.x, c1.y, c1.z);
		gl.glVertex3f(p1.x, p1.y, p1.z + 1);
		gl.glColor3f(c2.x, c2.y, c2.z);
		gl.glVertex3f(p2.x, p2.y, p2.z + 1);
	}
	
	public void drawTriangle(Point3f p0, Color4f c0, Point3f p1, Color4f c1, Point3f p2, Color4f c2) {
		enableRasterMode(false);
		if (iGlMode != GL.GL_TRIANGLES) {
			gl.glEnd();
			iGlMode = GL.GL_TRIANGLES;
			gl.glBegin(iGlMode);
		}
		gl.glColor4f(c0.x, c0.y, c0.z, c0.w);
		gl.glVertex3f(p0.x, p0.y, p0.z);
		gl.glColor4f(c1.x, c1.y, c1.z, c1.w);
		gl.glVertex3f(p1.x, p1.y, p1.z);
		gl.glColor4f(c2.x, c2.y, c2.z, c2.w);
		gl.glVertex3f(p2.x, p2.y, p2.z);
	}
	
	public void drawTriangle(Point3f p0, Vector3f n0, Point3f p1, Vector3f n1, Point3f p2, Vector3f n2) {
		enableRasterMode(false);
		if (iGlMode != GL.GL_TRIANGLES) {
			gl.glEnd();
			iGlMode = GL.GL_TRIANGLES;
			gl.glBegin(iGlMode);
		}
//		gl.glEnable(GL.GL_LIGHTING);
//		gl.glBegin(GL.GL_TRIANGLES);
		gl.glNormal3f(-n0.x, -n0.y, -n0.z);
		gl.glVertex3f(p0.x, p0.y, p0.z + 1);
		gl.glNormal3f(-n1.x, -n1.y, -n1.z);
		gl.glVertex3f(p1.x, p1.y, p1.z + 1);
		gl.glNormal3f(-n2.x, -n2.y, -n2.z);
		gl.glVertex3f(p2.x, p2.y, p2.z + 1);
//		gl.glEnd();
//		gl.glDisable(GL.GL_LIGHTING);
//		gl.glBegin(GL.GL_LINES);
//		int l = 10;
//		gl.glVertex3f(p0.x, p0.y, p0.z);
//		gl.glVertex3f(p0.x + n0.x * l, p0.y + n0.y * l, p0.z + n0.z * l);
//		gl.glVertex3f(p1.x, p1.y, p1.z);
//		gl.glVertex3f(p1.x + n1.x * l, p1.y + n1.y * l, p1.z + n1.z * l);
//		gl.glVertex3f(p2.x, p2.y, p2.z);
//		gl.glVertex3f(p2.x + n2.x * l, p2.y + n2.y * l, p2.z + n2.z * l);
//		gl.glEnd();
//		iGlMode = -1;
	}
	
	public void drawCurve(Curve curve) { }
	
	public boolean isDepthBufferSupported() {
		return true;
	}
	
	public boolean isShadingSupported() {
		return true;
	}
	
	public boolean isLightingSupported() {
		return true; // FIXME
	}
	
	public boolean isTransformSupported() {
		return false; // FIXME
	}
	
	public Graphics getGraphics() {
		return ((Component) glDrawable).getGraphics();
	}
}
